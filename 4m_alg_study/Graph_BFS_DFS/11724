
def DFS (adj,s,visited):
    visited[s]= True
    for v in adj[s]:
        if visited[v] == False:
            DFS(adj,v,visited)


if __name__ == '__main__':
    N, M = map(int, input().split())
    adj = [[] for _ in range(N)]  # 인접 리스트를 생성합니다.
    for _ in range(M):
        u, v = map(int, input().split())
        adj[u - 1].append(v - 1)  # 정점 번호를 1부터 N까지로 입력받았으므로 1을 빼줍니다.
        adj[v - 1].append(u - 1)  # 정점 번호를 1부터 N까지로 입력받았으므로 1을 빼줍니다.

    visited = [False] * (N)  # 방문 여부 리스트의 크기를 N+1로 설정합니다.
    count = 0

    for i in range(N):
        if not visited[i]:
            count += 1
            DFS(adj, i, visited)
    print(count)
'''
---------------------------------------------------------------
'''
import sys
sys.setrecursionlimit(10**6)
input = sys.stdin.readline

# dfs 함수
def dfs(graph, v, visited):
    visited[v] = True
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)

n, m = map(int, input().split()) # 정점의 개수, 간선의 개수
graph = [[] for _ in range(n+1)]
for i in range(m):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)

count = 0 # 연결 노드의 수
visited = [False] * (n+1)
for i in range(1, n+1):
    if not visited[i]:
        dfs(graph, i, visited)
        count += 1 # dfs 한 번 끝날 때마다 count+1

print(count)
